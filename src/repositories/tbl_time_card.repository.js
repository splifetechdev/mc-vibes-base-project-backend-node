const db = require("../db/models");
const { Op } = require("sequelize");

exports.find_all = async (company_id) =>
  await db.tbl_time_card.findAll({
    where: {
      company_id,
    },
    include: [
      db.tbl_worker,
      db.tbl_mch,
      {
        model: db.tbl_opn_ord,
        // include: { all: true },
      },
      {
        model: db.tbl_time_card_detail,
      },
      {
        model: db.tbl_mch,
        include: [
          {
            model: db.tbl_work_center,
            include: [{ model: db.tbl_work_center_group }],
          },
        ],
      },
      { model: db.tbl_opn_ord },
      { model: db.doc_running },
    ],
    order: [["created_at", "DESC"]],
  });

exports.remove_log = async (log_id) =>
  await db.tbl_time_card_detail.destroy({
    where: { id: log_id },
  });

exports.remove_defect = async (defect_id) =>
  await db.tbl_time_card_defect.destroy({
    where: {
      id: defect_id,
    },
  });

exports.remove_time_card = async (tc_id) =>
  await db.tbl_time_card.destroy({
    where: {
      id: tc_id,
    },
  });

exports.remove_time_card_detail = async (tc_id) =>
  await db.tbl_time_card_detail.destroy({
    where: {
      time_card_id: tc_id,
    },
  });

exports.bulk_remove_defect = async (defect_id_list) =>
  await db.tbl_time_card_defect.destroy({
    where: {
      id: {
        [Op.in]: defect_id_list,
      },
    },
  });

exports.find_by_id = async (timecard_id, u_define_module_id) =>
  await db.tbl_time_card.findOne({
    where: {
      id: timecard_id,
    },
    include: [
      {
        model: db.u_define_master,
        required: false,
        where: { u_define_module_id },
      },
      { model: db.tbl_mch, required: false },
      { model: db.tbl_opn_ord, required: false },
      { model: db.doc_running, required: false },
    ],
  });

exports.get_time_card_with_log = async (timecard_id) =>
  await db.tbl_time_card.findOne({
    where: {
      id: timecard_id,
    },
    include: [
      {
        model: db.tbl_time_card_detail,
        order: [["tbl_time_card_detail.created_at", "DESC"]],
        include: [db.tbl_time_card_defect],
      },
      {
        model: db.tbl_opn_ord,
      },
      { model: db.tbl_mch },
      { model: db.doc_running },
    ],
  });

exports.post_time_card = async (timeCard) => {
  try {
    return await db.sequelize.transaction(async (t) => {
      const [timecardHeader, timecardDetails] = await Promise.all([
        db.tbl_time_card.findOne({
          where: {
            id: timeCard.id,
          },
          lock: true,
          transaction: t,
        }),
        db.tbl_time_card_detail.findAll({
          where: {
            time_card_id: timeCard.id,
          },
          lock: true,
          transaction: t,
        }),
      ]);
      const opnOrdIdList = timecardDetails.reduce((acc, cur) => {
        if (cur.opn_ord_id) {
          return [...acc, cur.opn_ord_id];
        }
        return acc;
      }, []);
      const opnOrdList = await db.tbl_opn_ord.findAll({
        where: {
          id: {
            [Op.in]: opnOrdIdList,
          },
        },
        lock: true,
        transaction: t,
      });
      await Promise.all(
        timecardDetails.map(async (detail) => {
          if (detail.downtime_id === null && detail.opn_ord_id) {
            let wc_id = detail.wc_id;

            if (!wc_id) {
              const machine = await db.tbl_mch.findOne({
                where: {
                  id: detail.mch_id,
                },
                transaction: t,
              });
              wc_id = machine.work_center_id;
            }
            const opnOrd = opnOrdList.find(
              (opn) => opn.id === detail.opn_ord_id
            );
            const workCenter = await db.tbl_work_center.findOne({
              where: {
                id: wc_id,
              },
              transaction: t,
            });
            const { labor_rate, foh_rate, voh_rate } = workCenter;
            const { work_hours, qty, setup_time } = detail;
            if (qty) {
              opnOrd.receive_qty = Number(qty) + Number(opnOrd.receive_qty);
            }
            if (setup_time) {
              opnOrd.act_setup_time =
                Number(setup_time) + Number(opnOrd.act_setup_time);
            }
            if (work_hours) {
              opnOrd.act_prod_time =
                Number(work_hours) + Number(opnOrd.act_prod_time);
            }
            const labor_cost = labor_rate * work_hours;
            const foh_cost = foh_rate * work_hours;
            const voh_cost = voh_rate * work_hours;
            opnOrd.act_labor_cost = labor_cost + Number(opnOrd.act_labor_cost);
            opnOrd.act_foh_cost = foh_cost + Number(opnOrd.act_foh_cost);
            opnOrd.act_voh_cost = voh_cost + Number(opnOrd.act_voh_cost);
          }
        })
      );
      timecardHeader.status = "post";
      await Promise.all([
        timecardHeader.save({ transaction: t }),
        ...opnOrdList.map((opn) => opn.save({ transaction: t })),
      ]);
    });
  } catch (error) {
    throw error;
  }
};

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Post Time Card ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ Overtime
 * @param {Object} timeCard - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• time card ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ post
 * @param {Object} options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 * @param {boolean} options.debug - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô true ‡∏à‡∏∞‡πÑ‡∏°‡πà commit transaction (‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug)
 * @param {boolean} options.dryRun - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô true ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
 * @returns {Promise} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
 */
exports.post_time_card_v2 = async (timeCard, options = {}) => {
  const { debug = false, dryRun = false } = options;
  try {
    console.log("üöÄ Starting post_time_card_v2 for timeCard ID:", timeCard.id);
    console.log("üîß Debug mode:", debug, "| Dry run:", dryRun);

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Database Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    return await db.sequelize.transaction(async (t) => {
      // *** 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Time Card Header ‡πÅ‡∏•‡∏∞ Details ***
      console.log("üìã Fetching timecard header and details...");

      const [timecardHeader, timecardDetails] = await Promise.all([
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• header ‡∏Ç‡∏≠‡∏á time card
        db.tbl_time_card.findOne({
          where: {
            id: timeCard.id,
          },
          lock: true, // ‡∏•‡πá‡∏≠‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
          transaction: t,
        }),
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• details ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á time card ‡∏ô‡∏µ‡πâ
        db.tbl_time_card_detail.findAll({
          where: {
            time_card_id: timeCard.id,
          },
          lock: true,
          transaction: t,
        }),
      ]);

      console.log(
        "üìÑ Timecard Header:",
        JSON.stringify(timecardHeader, null, 2)
      );
      console.log("üìù Timecard Details count:", timecardDetails.length);
      console.log(
        "üìù Timecard Details:",
        JSON.stringify(timecardDetails, null, 2)
      );

      // *** 2. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° Operation Order IDs ***
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á opn_ord_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null
      const opnOrdIdList = timecardDetails.reduce((acc, cur) => {
        if (cur.opn_ord_id) {
          return [...acc, cur.opn_ord_id];
        }
        return acc;
      }, []);

      console.log("üî¢ Operation Order IDs:", opnOrdIdList);

      // *** 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Operation Orders ***
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• operation orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      const opnOrdList = await db.tbl_opn_ord.findAll({
        where: {
          id: {
            [Op.in]: opnOrdIdList,
          },
        },
        lock: true,
        transaction: t,
      });

      console.log("üì¶ Operation Orders loaded:", opnOrdList.length);
      opnOrdList.forEach((opn, index) => {
        console.log(
          `üì¶ OpnOrd[${index}] ID:${opn.id}, receive_qty:${opn.receive_qty}, act_labor_cost:${opn.act_labor_cost}`
        );
      });

      // *** 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô ***
      /**
       * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
       * @param {string} start1 - ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏£‡∏Å (HH:MM:SS)
       * @param {string} end1 - ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏£‡∏Å (HH:MM:SS)
       * @param {string} start2 - ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (HH:MM:SS)
       * @param {string} end2 - ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (HH:MM:SS)
       * @returns {number} - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö
       */
      const calculateOverlapHours = (start1, end1, start2, end2) => {
        console.log(
          `üïê Calculating overlap between ${start1}-${end1} and ${start2}-${end2}`
        );

        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "HH:MM:SS" ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
        const timeToMinutes = (timeStr) => {
          const [hours, minutes, seconds] = timeStr.split(":").map(Number);
          return hours * 60 + minutes + (seconds || 0) / 60;
        };

        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
        const start1Min = timeToMinutes(start1);
        const end1Min = timeToMinutes(end1);
        const start2Min = timeToMinutes(start2);
        const end2Min = timeToMinutes(end2);

        console.log(
          `üïê Converted to minutes: Work(${start1Min}-${end1Min}), OT(${start2Min}-${end2Min})`
        );

        // ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö
        const overlapStart = Math.max(start1Min, start2Min); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤
        const overlapEnd = Math.min(end1Min, end2Min); // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        if (overlapStart < overlapEnd) {
          const overlapHours = (overlapEnd - overlapStart) / 60;
          console.log(
            `üïê Overlap found: ${overlapHours} hours (${overlapStart}-${overlapEnd} minutes)`
          );
          return overlapHours; // ‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        }

        console.log("üïê No overlap found");
        return 0; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö
      };

      // *** 5. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Time Card Details ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ***
      await Promise.all(
        timecardDetails.map(async (detail, detailIndex) => {
          console.log(
            `\n‚öôÔ∏è Processing detail ${detailIndex + 1}/${
              timecardDetails.length
            }`
          );
          console.log(
            `‚öôÔ∏è Detail ID: ${detail.id}, downtime_id: ${detail.downtime_id}, opn_ord_id: ${detail.opn_ord_id}`
          );

          // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà downtime ‡πÅ‡∏•‡∏∞‡∏°‡∏µ operation order
          if (detail.downtime_id === null && detail.opn_ord_id) {
            console.log("‚úÖ Processing production detail (not downtime)");

            // *** 5.1 ‡∏´‡∏≤ Work Center ID ***
            let wc_id = detail.wc_id;
            console.log(`üè≠ Initial wc_id: ${wc_id}, mch_id: ${detail.mch_id}`);

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ work center id ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏à‡∏≤‡∏Å machine
            if (!wc_id) {
              const machine = await db.tbl_mch.findOne({
                where: {
                  id: detail.mch_id,
                },
                transaction: t,
              });
              wc_id = machine?.work_center_id;
              console.log(`üè≠ Loaded wc_id from machine: ${wc_id}`);
            }

            // *** 5.2 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Operation Order ‡πÅ‡∏•‡∏∞ Work Center ***
            const opnOrd = opnOrdList.find(
              (opn) => opn.id === detail.opn_ord_id
            );

            const workCenter = await db.tbl_work_center.findOne({
              where: {
                id: wc_id,
              },
              transaction: t,
            });

            console.log(`üìã Operation Order ID: ${opnOrd?.id}`);
            console.log(
              `üè≠ Work Center: ${workCenter?.wc_name}, labor_rate: ${workCenter?.labor_rate}`
            );

            // *** 5.3 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ***
            let { labor_rate, foh_rate, voh_rate } = workCenter;
            const { work_hours, qty, setup_time, time_start, time_end } =
              detail;

            console.log(
              `üí∞ Initial rates - labor: ${labor_rate}, foh: ${foh_rate}, voh: ${voh_rate}`
            );
            console.log(
              `‚è±Ô∏è Work details - hours: ${work_hours}, qty: ${qty}, setup: ${setup_time}`
            );
            console.log(`‚è∞ Time range: ${time_start} - ${time_end}`);

            // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏î‡∏∂‡∏á labor_rate ‡∏à‡∏≤‡∏Å worker ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà reset ‡πÄ‡∏õ‡πá‡∏ô 0
            const get_labar_rate = await db.tbl_worker.findOne({
              where: { id: detail.worker_id },
              transaction: t,
            });

            console.log(
              "üë∑ Worker details:",
              JSON.stringify(get_labar_rate, null, 2)
            );

            if (get_labar_rate && get_labar_rate.emp_rate) {
              labor_rate = get_labar_rate.emp_rate;
              console.log("üë∑ Loaded worker labor rate:", labor_rate);
            } else {
              console.warn(
                "‚ö†Ô∏è No labor rate found for worker ID:",
                detail.worker_id,
                "- using work center rate:",
                labor_rate
              );
              // ‡πÉ‡∏ä‡πâ labor_rate ‡∏à‡∏≤‡∏Å work center ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô
            }

            // *** 5.4 ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Quantity ‡πÅ‡∏•‡∏∞ Time ***
            console.log("üìä Updating quantities and times...");

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ qty > 0)
            if (qty && qty > 0) {
              const oldReceiveQty = opnOrd.receive_qty;
              opnOrd.receive_qty = Number(qty) + Number(opnOrd.receive_qty);
              console.log(
                `üìä Updated receive_qty: ${oldReceiveQty} + ${qty} = ${opnOrd.receive_qty}`
              );
            } else {
              console.log(`üìä Skipping qty update (qty = ${qty})`);
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ setup (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ setup_time > 0)
            if (setup_time && setup_time > 0) {
              const oldSetupTime = opnOrd.act_setup_time;
              opnOrd.act_setup_time =
                Number(setup_time) + Number(opnOrd.act_setup_time);
              console.log(
                `üìä Updated setup_time: ${oldSetupTime} + ${setup_time} = ${opnOrd.act_setup_time}`
              );
            } else {
              console.log(
                `üìä Skipping setup_time update (setup_time = ${setup_time})`
              );
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ work_hours > 0)
            if (work_hours && work_hours > 0) {
              const oldProdTime = opnOrd.act_prod_time;
              opnOrd.act_prod_time =
                Number(work_hours) + Number(opnOrd.act_prod_time);
              console.log(
                `üìä Updated prod_time: ${oldProdTime} + ${work_hours} = ${opnOrd.act_prod_time}`
              );
            } else {
              console.log(
                `üìä Skipping prod_time update (work_hours = ${work_hours})`
              );
            }

            // *** 5.5 ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô) ***
            let regular_work_hours = work_hours || 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏î‡∏•‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ OT)
            let total_ot_hours = 0; // ‡∏£‡∏ß‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á OT
            let total_ot_cost = 0; // ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á OT

            console.log(
              `üí∞ Initial calculation - work_hours: ${work_hours}, labor_rate: ${labor_rate}`
            );

            // *** 5.6 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á Overtime ***
            if (detail.mch_id && time_start && time_end) {
              console.log("üïê Starting OT calculation...");

              try {
                // Query ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OT ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
                const otQuery = `
                  SELECT 
                    sot.ot_start_time,  -- ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô OT
                    sot.ot_end_time,    -- ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î OT
                    sot.ot_rate         -- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á OT
                  FROM tbl_mch_shift ms
                  LEFT JOIN tbl_shift s ON ms.shift_id = s.id
                  LEFT JOIN tbl_shift_ot sot ON s.id = sot.shift_id
                  WHERE ms.machine_id = :machine_id
                    AND sot.ot_start_time IS NOT NULL
                    AND sot.ot_end_time IS NOT NULL
                `;

                console.log(
                  `üîç Querying OT data for machine_id: ${detail.mch_id}`
                );

                // Execute query ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà machine_id
                const otResults = await db.sequelize.query(otQuery, {
                  replacements: { machine_id: detail.mch_id },
                  type: db.sequelize.QueryTypes.SELECT,
                  transaction: t,
                });

                console.log(
                  `üîç Found ${otResults?.length || 0} OT periods:`,
                  JSON.stringify(otResults, null, 2)
                );

                // *** 5.7 ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á OT ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ***
                if (otResults && otResults.length > 0) {
                  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á OT ‡∏ó‡∏µ‡πà‡∏û‡∏ö (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
                  otResults.forEach((otData, otIndex) => {
                    const { ot_start_time, ot_end_time, ot_rate } = otData;

                    // ‡πÅ‡∏õ‡∏•‡∏á Date object ‡πÄ‡∏õ‡πá‡∏ô string ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS
                    const formatTimeFromDate = (dateObj) => {
                      if (!dateObj) return null;

                      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ return ‡∏ï‡∏£‡∏á‡πÜ
                      if (typeof dateObj === "string") {
                        return dateObj;
                      }

                      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date object ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô HH:MM:SS ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ UTC
                      if (dateObj instanceof Date) {
                        const hours = dateObj
                          .getUTCHours()
                          .toString()
                          .padStart(2, "0");
                        const minutes = dateObj
                          .getUTCMinutes()
                          .toString()
                          .padStart(2, "0");
                        const seconds = dateObj
                          .getUTCSeconds()
                          .toString()
                          .padStart(2, "0");
                        return `${hours}:${minutes}:${seconds}`;
                      }

                      return null;
                    };

                    const otStartFormatted = formatTimeFromDate(ot_start_time);
                    const otEndFormatted = formatTimeFromDate(ot_end_time);

                    console.log(`\nüïê Processing OT period ${otIndex + 1}:`);
                    console.log(
                      `   - Original: ${ot_start_time} - ${ot_end_time}`
                    );
                    console.log(
                      `   - Formatted: ${otStartFormatted} - ${otEndFormatted}`
                    );
                    console.log(`   - Rate: ${ot_rate}`);

                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
                    if (!otStartFormatted || !otEndFormatted) {
                      console.warn(
                        `‚ö†Ô∏è Invalid OT time format, skipping period ${
                          otIndex + 1
                        }`
                      );
                      return;
                    }

                    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á OT ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
                    const otHours = calculateOverlapHours(
                      time_start, // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å time card
                      time_end, // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å time card
                      otStartFormatted, // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô OT (‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß)
                      otEndFormatted // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î OT (‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß)
                    );

                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á OT ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á OT
                    if (otHours > 0) {
                      const ot_labor_cost = labor_rate * ot_rate * otHours;
                      total_ot_cost += ot_labor_cost;
                      total_ot_hours += otHours;

                      console.log(`üí∞ OT Calculation:`);
                      console.log(`   - Labor Rate: ${labor_rate}`);
                      console.log(`   - OT Rate Multiplier: ${ot_rate}`);
                      console.log(`   - OT Hours: ${otHours}`);
                      console.log(
                        `   - OT Cost: (${labor_rate} √ó ${ot_rate}) √ó ${otHours} = ${ot_labor_cost}`
                      );
                      console.log(
                        `   - Total OT Hours so far: ${total_ot_hours}`
                      );
                      console.log(
                        `   - Total OT Cost so far: ${total_ot_cost}`
                      );
                    }
                  });

                  // *** 5.8 ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤ OT ‡∏≠‡∏≠‡∏Å) ***
                  if (total_ot_hours > 0) {
                    regular_work_hours = Math.max(
                      0,
                      (work_hours || 0) - total_ot_hours
                    );
                    console.log(
                      `‚öñÔ∏è Adjusted regular work hours: ${work_hours} - ${total_ot_hours} = ${regular_work_hours}`
                    );
                  }
                }
              } catch (error) {
                console.error("‚ùå Error calculating OT:", error);
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OT ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
                // (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
              }
            } else {
              console.log(
                "‚ÑπÔ∏è Skipping OT calculation - missing machine_id or time range"
              );
            }

            // *** 5.9 ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ***
            const regular_labor_cost = labor_rate * regular_work_hours; // ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î OT)
            const total_labor_cost = regular_labor_cost + total_ot_cost; // ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏£‡∏ß‡∏°
            const foh_cost = foh_rate * (work_hours || 0); // Fixed Overhead Cost (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
            const voh_cost = voh_rate * (work_hours || 0); // Variable Overhead Cost (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)

            console.log(`üí∞ Final cost calculation:`);
            console.log(`   - Regular work hours: ${regular_work_hours}`);
            console.log(
              `   - Regular labor cost: ${labor_rate} √ó ${regular_work_hours} = ${regular_labor_cost}`
            );
            console.log(`   - OT work hours: ${total_ot_hours}`);
            console.log(`   - OT labor cost: ${total_ot_cost}`);
            console.log(
              `   - Total labor cost: ${regular_labor_cost} + ${total_ot_cost} = ${total_labor_cost}`
            );
            console.log(
              `   - FOH cost: ${foh_rate} √ó ${work_hours || 0} = ${foh_cost}`
            );
            console.log(
              `   - VOH cost: ${voh_rate} √ó ${work_hours || 0} = ${voh_cost}`
            );

            // *** 5.10 ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô Operation Order ***
            const oldLaborCost = opnOrd.act_labor_cost;
            const oldFohCost = opnOrd.act_foh_cost;
            const oldVohCost = opnOrd.act_voh_cost;

            opnOrd.act_labor_cost =
              total_labor_cost + Number(opnOrd.act_labor_cost);
            opnOrd.act_foh_cost = foh_cost + Number(opnOrd.act_foh_cost);
            opnOrd.act_voh_cost = voh_cost + Number(opnOrd.act_voh_cost);

            console.log(`üìä Updated operation costs:`);
            console.log(
              `   - Labor: ${oldLaborCost} + ${total_labor_cost} = ${opnOrd.act_labor_cost}`
            );
            console.log(
              `   - FOH: ${oldFohCost} + ${foh_cost} = ${opnOrd.act_foh_cost}`
            );
            console.log(
              `   - VOH: ${oldVohCost} + ${voh_cost} = ${opnOrd.act_voh_cost}`
            );
          } else {
            console.log("‚è≠Ô∏è Skipping detail (downtime or no operation order)");
          }
        })
      );

      // *** 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ***
      console.log("üíæ Saving all changes...");

      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ time card ‡πÄ‡∏õ‡πá‡∏ô "post"
      const oldStatus = timecardHeader.status;
      timecardHeader.status = "post";
      console.log(`üìã Updating timecard status: ${oldStatus} ‚Üí post`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏°‡∏î debug ‡∏´‡∏£‡∏∑‡∏≠ dry run
      if (debug) {
        console.log(
          "üö® DEBUG MODE: Rolling back transaction to prevent data changes"
        );
        console.log("üìã Changes that WOULD be saved:");
        console.log(`   - Timecard status: ${oldStatus} ‚Üí post`);
        opnOrdList.forEach((opn, index) => {
          console.log(`   - OpnOrd[${index + 1}] ID:${opn.id}:`);
          console.log(`     * Labor cost: ${opn.act_labor_cost}`);
          console.log(`     * FOH cost: ${opn.act_foh_cost}`);
          console.log(`     * VOH cost: ${opn.act_voh_cost}`);
          console.log(`     * Receive qty: ${opn.receive_qty}`);
          console.log(`     * Setup time: ${opn.act_setup_time}`);
          console.log(`     * Prod time: ${opn.act_prod_time}`);
        });

        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö rollback transaction
        throw new Error("DEBUG_MODE_ROLLBACK");
      } else if (dryRun) {
        console.log("üß™ DRY RUN MODE: Showing results without saving");
        console.log("üìã Changes that WOULD be saved:");
        console.log(`   - Timecard status: ${oldStatus} ‚Üí post`);
        opnOrdList.forEach((opn, index) => {
          console.log(`   - OpnOrd[${index + 1}] ID:${opn.id}:`);
          console.log(`     * Labor cost: ${opn.act_labor_cost}`);
          console.log(`     * FOH cost: ${opn.act_foh_cost}`);
          console.log(`     * VOH cost: ${opn.act_voh_cost}`);
          console.log(`     * Receive qty: ${opn.receive_qty}`);
          console.log(`     * Setup time: ${opn.act_setup_time}`);
          console.log(`     * Prod time: ${opn.act_prod_time}`);
        });

        return {
          success: true,
          mode: "DRY_RUN",
          message: "Calculation completed without saving data",
          timecardId: timeCard.id,
          changes: {
            timecardStatus: { from: oldStatus, to: "post" },
            operationOrders: opnOrdList.map((opn) => ({
              id: opn.id,
              laborCost: opn.act_labor_cost,
              fohCost: opn.act_foh_cost,
              vohCost: opn.act_voh_cost,
              receiveQty: opn.receive_qty,
              setupTime: opn.act_setup_time,
              prodTime: opn.act_prod_time,
            })),
          },
        };
      } else {
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        await Promise.all([
          timecardHeader.save({ transaction: t }), // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å time card header
          ...opnOrdList.map((opn) => opn.save({ transaction: t })), // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å operation orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        ]);

        console.log("‚úÖ Post timecard completed successfully!");
      }

      // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      console.log("\nüìã SUMMARY:");
      console.log(`   - Timecard ID: ${timeCard.id}`);
      console.log(`   - Status: ${oldStatus} ‚Üí post`);
      console.log(`   - Details processed: ${timecardDetails.length}`);
      console.log(`   - Operation orders updated: ${opnOrdList.length}`);

      opnOrdList.forEach((opn, index) => {
        console.log(
          `   - OpnOrd[${index + 1}] ID:${opn.id} - Labor: ${
            opn.act_labor_cost
          }, FOH: ${opn.act_foh_cost}, VOH: ${opn.act_voh_cost}`
        );
      });
    });
  } catch (error) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô debug mode rollback ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (error.message === "DEBUG_MODE_ROLLBACK") {
      console.log("üîÑ Transaction rolled back successfully (Debug mode)");
      return {
        success: true,
        mode: "DEBUG",
        message: "Debug completed - no data was changed",
        timecardId: timeCard.id,
      };
    }

    console.error("‚ùå Error in post_time_card_v2:", error);
    throw error;
  }
};

exports.save_log = async (time_card_log) => {
  try {
    return await db.tbl_time_card_detail.create(time_card_log);
    return await db.sequelize.transaction(async (t) => {
      const [workCenter, opnOrd] = await Promise.all([
        db.tbl_work_center.findOne({
          where: {
            id: time_card_log.wc_id,
          },
          transaction: t,
        }),
        db.tbl_opn_ord.findOne({
          where: {
            id: time_card_log.opn_ord_id,
          },
          lock: true,
          transaction: t,
        }),
      ]);
      const { labor_rate, foh_rate, voh_rate } = workCenter;
      const { work_hours, qty, setup_time } = time_card_log;
      const savedData = await db.tbl_time_card_detail.create(time_card_log, {
        transaction: t,
      });
      if (
        !time_card_log.downtime_id &&
        !time_card_log.tbl_time_card_defects.length
      ) {
        if (qty) {
          opnOrd.receive_qty = Number(qty) + Number(opnOrd.receive_qty);
        }
        if (setup_time) {
          opnOrd.act_setup_time =
            Number(setup_time) + Number(opnOrd.setup_time);
        }
        if (work_hours) {
          opnOrd.act_prod_time =
            Number(work_hours) + Number(opnOrd.act_prod_time);
        }

        const labor_cost = labor_rate * work_hours;
        const foh_cost = foh_rate * work_hours;
        const voh_cost = voh_rate * work_hours;
        opnOrd.act_labor_cost = labor_cost + Number(opnOrd.act_labor_cost);
        opnOrd.act_foh_cost = foh_cost + Number(opnOrd.act_foh_cost);
        opnOrd.act_voh_cost = voh_cost + Number(opnOrd.act_voh_cost);
        await opnOrd.save({ transaction: t });
      }

      return savedData;
    });
  } catch (error) {
    console.log({ error });
    throw error;
  }
};

exports.update_log = async (time_card_log) => {
  try {
    return db.tbl_time_card_detail.update(time_card_log, {
      where: {
        id: time_card_log.id,
      },
    });
    return await db.sequelize.transaction(async (t) => {
      const [workCenter, opnOrd, timeCardLog] = await Promise.all([
        db.tbl_work_center.findOne({
          where: {
            id: time_card_log.wc_id,
          },
          transaction: t,
        }),
        db.tbl_opn_ord.findOne({
          where: {
            id: time_card_log.opn_ord_id,
          },
          lock: true,
          transaction: t,
        }),
        db.tbl_time_card_detail.findOne({
          where: {
            id: time_card_log.id,
          },
          transaction: t,
        }),
      ]);
      const { labor_rate, foh_rate, voh_rate } = workCenter;
      const { work_hours, qty, setup_time } = time_card_log;
      const savedData = db.tbl_time_card_detail.update(time_card_log, {
        where: {
          id: time_card_log.id,
        },
        transaction: t,
      });
      if (
        !time_card_log.downtime_id &&
        !time_card_log.tbl_time_card_defects.length
      ) {
        if (qty) {
          const diff = Number(qty) - Number(timeCardLog.qty);
          opnOrd.receive_qty = diff + Number(opnOrd.receive_qty);
        }
        if (setup_time) {
          const diff = Number(setup_time) - Number(timeCardLog.setup_time);
          opnOrd.act_setup_time = diff + Number(opnOrd.act_setup_time);
        }

        if (work_hours) {
          const diff = Number(work_hours) - Number(timeCardLog.work_hours);
          opnOrd.act_prod_time = diff + Number(opnOrd.act_prod_time);
        }
        const old_labor_cost = labor_rate * Number(timeCardLog.work_hours);
        const labor_cost = labor_rate * work_hours;
        const labor_diff = labor_cost - old_labor_cost;

        const old_foh_cost = foh_rate * Number(timeCardLog.work_hours);
        const foh_cost = foh_rate * work_hours;
        const foh_diff = foh_cost - old_foh_cost;

        const old_voh_cost = voh_rate * Number(timeCardLog.work_hours);
        const voh_cost = voh_rate * work_hours;
        const voh_diff = voh_cost - old_voh_cost;
        opnOrd.act_labor_cost = labor_diff + Number(opnOrd.act_labor_cost);
        opnOrd.act_foh_cost = foh_diff + Number(opnOrd.act_foh_cost);
        opnOrd.act_voh_cost = voh_diff + Number(opnOrd.act_voh_cost);
        await opnOrd.save({ transaction: t });
      }
      return await savedData;
    });
  } catch (error) {
    console.log({ error });
    throw error;
  }
};

exports.save_defect = async (defect) =>
  await db.tbl_time_card_defect.create(defect);

exports.update_defect = async (defect) =>
  await db.tbl_time_card_defect.update(defect, {
    where: {
      id: defect.id,
    },
  });

exports.list_work_order_option = async (company_id) => {
  const queryResult = await db.sequelize.query(
    `SELECT DISTINCT doc_running_no from tbl_opn_ord where company_id = ${company_id}`,
    { type: db.sequelize.QueryTypes.SELECT }
  );
  return queryResult;
};

// exports.find_machine_by_id = async (machine_id) => await db.tbl_mch.findOne({
//   where: {
//     id: machine_id
//   },
//   include: [db.tbl_work_center]
// })

// exports.find_by_id_getname = async (id) => await db.tbl_mch.findOne({
//   where: {
//     id: id
//   },
// })

// exports.find_by_company_id_and_machine_id = async (company_id, machine_id) => await db.tbl_mch.findOne({
//   where: {
//     company_id,
//     machine_id
//   }
// })

exports.create = async (data) => await db.tbl_time_card.create(data);

// exports.update = async (id, data) =>
//   await db.tbl_mch.update(data, {
//     where: {
//       id: id,
//     },
//   });

// exports.delete = async (id) =>
//   await db.tbl_mch.destroy({
//     where: {
//       id: id,
//     },
//   });

exports.getdeletejobbycompany = async (data) =>
  await db.tbl_time_card.findAll({
    attributes: {
      include: [
        [
          db.sequelize.fn("FORMAT", db.sequelize.col("doc_date"), "dd/MM/yyyy"),
          "doc_date_show",
        ],
      ],
    },
    where: {
      company_id: data.company_id,
      [Op.and]: [
        data.wo_running_no && { wo_running_no: data.wo_running_no },
        data.mch_id && { mch_id: data.mch_id },
        data.doc_date && {
          doc_date: {
            [Op.between]: [data.datefrom, data.dateto],
          },
        },
        data.doc_running_no && { doc_running_no: data.doc_running_no },
      ],
    },
    include: [
      { model: db.tbl_mch },
      {
        model: db.tbl_time_card_detail,
      },
    ],
  });

exports.list_doc_running_no_option = async (company_id) => {
  const queryResult = await db.sequelize.query(
    `SELECT DISTINCT doc_running_no from tbl_time_card where company_id = ${company_id}`,
    { type: db.sequelize.QueryTypes.SELECT }
  );
  return queryResult;
};

exports.listtimecardWorkOrderOptions = async (company_id) => {
  const queryResult = await db.sequelize.query(
    `SELECT DISTINCT wo_running_no from tbl_time_card where company_id = ${company_id}`,
    { type: db.sequelize.QueryTypes.SELECT }
  );
  return queryResult;
};

exports.time_card_detail_check_opn_id_ues = async (opn_id) => {
  const queryResult = await db.sequelize.query(
    `SELECT COUNT(id) as ctc from tbl_time_card_detail where opn_ord_id = ${opn_id}`,
    { type: db.sequelize.QueryTypes.SELECT }
  );
  return queryResult;
};
